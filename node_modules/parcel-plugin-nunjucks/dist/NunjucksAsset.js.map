{"version":3,"file":"NunjucksAsset.js","sources":["../src/NunjucksAsset.js"],"sourcesContent":["import cosmiconfig   from 'cosmiconfig'\nimport Nunjucks      from 'nunjucks'\nimport { parseFile } from 'nunjucks-parser'\nimport Asset         from 'parcel-bundler/src/Asset'\nimport Path          from 'path'\n\n/**\n * A cache which associates a base Asset class (e.g. JSONAsset, HTMLAsset)\n * with its corresponding synthetic subclass.\n */\nconst CACHE = new Map()\n\n/**\n * An array of arguments to pass to Asset#getConfig indicating where to find\n * config data for this plugin.\n */\nconst CONFIG_FILE = [\n    ['.nunjucksrc', '.nunjucks.js', 'nunjucks.config.js'],\n    {\n        packageKey: 'nunjucks'\n    }\n]\n\n/**\n * A reference to the NunjucksAsset class (defined below), which serves two\n * purposes:\n *\n * a) it's an instantiable class ([NunjucksAsset < Asset < Object]) which\n * processes the nunjucks template and then halts any further processing. This\n * is used for templated raw assets e.g. HTML templates we don't want to process\n * with PostHTML.\n *\n * b) it's also used to construct instances of the dynamic subclasses which\n * inherit from a more specific asset-type determined by the template's filename\n * or +assetType+ option e.g. [NunjucksAsset < HTMLAsset < Asset < Object]\n *\n * In the first case, we return from the constructor in the usual way (i.e.\n * implicitly return `this`). In the second case, we return the actual instance\n * of the (dynamic) subclass.\n *\n * In both cases, the implementation of the +load+ method is the same, so we\n * define it in the static class. Since we use the same class name for the\n * dynamic NunjucksAsset subclasses and the static NunjucksAsset class, we need\n * a way to refer to the latter from the body of the former (where the +load+\n * method is referenced), so this variable holds a shared reference to it\n */\nlet NunjucksAssetClass\n\n/**\n * Given a superclass (e.g. HTMLAsset, JSONAsset), get the corresponding\n * subclass from the cache, creating it if it doesn't exist.\n */\nfunction extend (baseClass) {\n    const cached = CACHE.get(baseClass)\n\n    if (cached) {\n        return cached\n    }\n\n    class NunjucksAsset extends baseClass {}\n\n    NunjucksAsset.prototype.load = NunjucksAssetClass.prototype.load\n\n    CACHE.set(baseClass, NunjucksAsset)\n\n    return NunjucksAsset\n}\n\n/**\n * Takes a possibly-lazy value and yields its result if it's a function (passing\n * through any supplied arguments), or the value itself otherwise.\n */\nfunction force (value, ...args) {\n    return (typeof value === 'function') ? value(...args) : value\n}\n\n/**\n * Return the absolute path of the effective config file (one of package.json,\n * .nunjucksrc, .nunjucks.js, or nunjucks.config.js) if available.\n *\n * Used to resolve relative paths in config.root.\n */\nasync function getConfigPath (asset) {\n    const [filenames, options] = CONFIG_FILE\n    const pkg = await asset.getPackage()\n\n    if (pkg && pkg[options.packageKey]) {\n        return pkg.pkgfile\n    }\n\n    // setting `load` to false returns the path to the config file rather than\n    // its contents\n    return asset.getConfig(filenames, { load: false })\n}\n\n/**\n * A synchronous version of Asset#getConfig. Needed because we need to access\n * config data (config.assetType) from the NunjucksAsset constructor, which is\n * synchronous.\n */\nfunction getConfigSync (asset) {\n    // Parcel doesn't provide a way to load an asset's config file synchronously\n    // [1], so we have to do it ourselves, using the same logic i.e. walk up\n    // from the asset's dir to the enclosing node_modules directory or the\n    // filesystem's root directory, whichever comes first\n    //\n    // [1] https://github.com/parcel-bundler/parcel/issues/3566\n\n    const [filenames, options] = CONFIG_FILE\n    const path = asset.name\n\n    // FIXME this is what we want to use for stopDir to exactly match Parcel's\n    // behavior [1], but resolving the stopDir dynamically is not currently\n    // supported by cosmiconfig [2], and there's no hook to override its\n    // Explorer class, so for now we have to make do with stopping at the\n    // project root (i.e. the current working directory)\n    //\n    // [1] see src/Resolver.js#findPackage and src/utils/config.js#resolve\n    // [2] https://github.com/davidtheclark/cosmiconfig/issues/219\n\n    // const fsRoot = Path.parse(path).root\n    // const stopDir = dir => {\n    //     return (dir === fsRoot) || Path.basename(dir) === 'node_modules'\n    // }\n\n    const explorer = cosmiconfig(options.packageKey, {\n        searchPlaces: ['package.json'].concat(filenames),\n        stopDir: process.cwd(), // project root\n    })\n\n    const result = explorer.searchSync(path)\n    const config = result && result.config\n\n    return config || {}\n}\n\n/**\n * Takes an asset path and returns an object containing components of its path\n * and base path (i.e. the path without the .njk extension). Passed as the\n * argument to lazy options (functions), e.g.:\n *\n *     // if there's no base extension, infer the asset type from the name of\n *     // the containing directory, e.g.:\n *     //\n *     //   - foo.html.njk    → html\n *     //   - bar.js.njk      → js\n *     //   - baz.css.njk     → css\n *     //   - src/js/foo.njk  → js\n *     //   - src/css/bar.njk → css\n *\n *     module.exports = {\n *         assetType ({ baseExt, dirname }) {\n *             return baseExt || dirname\n *         }\n *     }\n */\nfunction parsePath (path) {\n    const parsed = Path.parse(path)\n    const basePath = Path.join(parsed.dir, parsed.name)\n    const baseExt = Path.extname(parsed.name)\n    const dirname = Path.basename(parsed.dir)\n    const dirs = parsed.dir.split(Path.sep)\n\n    // if path is \"/foo/bar/baz.html.njk\":\n    return {\n        baseExt,               // \".html\"\n        basePath,              // \"/foo/bar/baz.html\"\n        dirname,               // \"bar\"\n        dir: parsed.dir,       // \"/foo/bar\"\n        dirs,                  // [\"\", \"foo\", \"bar\"]\n        ext: parsed.ext,       // \".njk\"\n        filename: parsed.base, // \"baz.html.njk\"\n        name: parsed.name,     // \"baz.html\"\n        path,                  // \"/foo/bar/baz.html.njk\"\n        root: parsed.root,     // \"/\"\n    }\n}\n\n/**\n * The NunjucksAsset class instantiates an instance of one of the following\n * classes:\n *\n *     1) NunjucksAsset < Asset < Object\n *     2) NunjucksAsset < XAsset < Asset < Object\n *\n * - where XAsset is a specific asset-type e.g. HTMLAsset or JSONAsset.\n *\n * Note: while the classes differ, the class name is the same in both cases (see\n * the notes on the NunjucksAssetClass variable for more details).\n */\nclass NunjucksAsset extends Asset {\n    constructor (path, options) {\n        super(path, options) // initialize so we can use `getConfig`\n\n        const parsedPath = parsePath(path)\n        const { basePath, baseExt } = parsedPath\n        const config = getConfigSync(this)\n\n        // because this is synchronous, config.assetType can't be async, so we\n        // don't await the result. (also, like config.env, there's no particular\n        // reason it should be async)\n        let assetType = force(config.assetType, parsedPath)\n\n        if (assetType) {\n            if (typeof assetType !== 'object') {\n                assetType = { raw: false, value: assetType }\n            }\n\n            // raw: true: extending RawAsset doesn't work as they're implemented\n            // as symlink-like references to the path of the raw (unprocessed)\n            // file, and there's no (e.g.) PlainTextAsset we can extend, so we\n            // directly extend Asset instead. the inheritance chain for this is\n            // already statically defined for this class, so we're done and can\n            // just return (void)\n            if (assetType.raw === true) {\n                // assign this.type, which sets the output file's extension\n                const type = assetType.value || baseExt || 'html'\n                this.type = type.startsWith('.') ? type.slice(1) : type\n                return\n            } else {\n                assetType = assetType.value\n            }\n        }\n\n        // XXX Parser#findParser should support an `ext` option rather than\n        // forcing us to concoct a fake filename\n        let dummmyPath\n\n        if (assetType) {\n            dummmyPath = `${basePath}.${assetType}`\n        } else if (baseExt && options.parser.extensions[baseExt.toLowerCase()]) {\n            dummmyPath = basePath\n        } else {\n            dummmyPath = `${basePath}.html`\n        }\n\n        const superclass = options.parser.findParser(dummmyPath)\n        const subclass = extend(superclass)\n\n        return new subclass(path, options)\n    }\n\n    /**\n     * Load the nunjucks template at the path supplied in `this.name` and\n     * return its rendered contents (string). Configuration and data for the\n     * nunjucks instance (Environment) is read from a config file, if available.\n     * If the template depends on (i.e. loads) any nested templates, they are\n     * registered as dependencies with Parcel.\n     */\n    async load () {\n        const _config = await this.getConfig(...CONFIG_FILE)\n        const config = _config || {}\n        const parsedPath = parsePath(this.name)\n        const projectRootDir = process.cwd()\n\n        // calling this after `getConfig` ensures we a) get the cached package.json\n        // (if any) and b) avoid any side effects that haven't already been\n        // triggered by `getConfig`\n        const configPath = _config ? (await getConfigPath(this)) : null\n        const configDir = configPath ? Path.dirname(configPath) : null\n\n        const templateDirs = [].concat(config.root || '.').map(dir => {\n            // resolve config.root paths relative to the config file (if\n            // available) or, failing that, the project root directory (the\n            // current working directory)\n            return Path.resolve(configDir || projectRootDir, dir)\n        })\n\n        const env = force(config.env, parsedPath) || Nunjucks.configure(\n            templateDirs,\n            config.options || {}\n        )\n\n        if (config.filters && !config.env) {\n            for (const [name, fn] of Object.entries(config.filters)) {\n                env.addFilter(name, fn)\n            }\n        }\n\n        const data = (await force(config.data, parsedPath)) || {}\n        const { content, dependencies } = await parseFile(env, this.name, { data })\n\n        for (const dependency of dependencies) {\n            if (dependency.parent) { // exclude self\n                this.addDependency(dependency.path, {\n                    resolved: dependency.path,\n                    includedInParent: true,\n                })\n            }\n        }\n\n        return content\n    }\n}\n\nNunjucksAssetClass = NunjucksAsset\n\nexport default NunjucksAsset\n"],"names":["CACHE","Map","CONFIG_FILE","packageKey","NunjucksAssetClass","extend","baseClass","cached","get","NunjucksAsset","prototype","load","set","force","value","args","getConfigPath","asset","filenames","options","pkg","getPackage","pkgfile","getConfig","getConfigSync","path","name","explorer","cosmiconfig","searchPlaces","concat","stopDir","process","cwd","result","searchSync","config","parsePath","parsed","Path","parse","basePath","join","dir","baseExt","extname","dirname","basename","dirs","split","sep","ext","filename","base","root","Asset","constructor","parsedPath","assetType","raw","type","startsWith","slice","dummmyPath","parser","extensions","toLowerCase","superclass","findParser","subclass","_config","projectRootDir","configPath","configDir","templateDirs","map","resolve","env","Nunjucks","configure","filters","fn","Object","entries","addFilter","data","content","dependencies","parseFile","dependency","parent","addDependency","resolved","includedInParent"],"mappings":"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"}